<?xml version="1.0"?>
<doc>
    <assembly>
        <name>xunit2</name>
    </assembly>
    <members>
        <member name="M:ExceptionExtensions.RethrowWithNoStackTraceLoss(System.Exception)">
            <summary>
            Rethrows an exception object without losing the existing stack trace information
            </summary>
            <param name="ex">The exception to re-throw.</param>
            <remarks>
            For more information on this technique, see
            http://www.dotnetjunkies.com/WebLog/chris.taylor/archive/2004/03/03/8353.aspx.
            The remote_stack_trace string is here to support Mono.
            </remarks>
        </member>
        <member name="M:ExceptionExtensions.Unwrap(System.Exception)">
            <summary>
            Unwraps an exception to remove any wrappers, like <see cref="T:System.Reflection.TargetInvocationException"/>.
            </summary>
            <param name="ex">The exception to unwrap.</param>
            <returns>The unwrapped exception.</returns>
        </member>
        <member name="T:Guard">
            <summary>
            Guard class, used for guard clauses and argument validation
            </summary>
        </member>
        <member name="M:Guard.ArgumentNotNull(System.String,System.Object)">
            <summary/>
        </member>
        <member name="M:Guard.ArgumentNotNullOrEmpty(System.String,System.Collections.IEnumerable)">
            <summary/>
        </member>
        <member name="M:Guard.ArgumentValid(System.String,System.String,System.Boolean)">
            <summary/>
        </member>
        <member name="M:Guard.FileExists(System.String,System.String)">
            <summary/>
        </member>
        <member name="T:Xunit.Sdk.AssertEqualityComparer`1">
            <summary>
            Default implementation of <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> used by the xUnit.net equality assertions.
            </summary>
            <typeparam name="T">The type that is being compared.</typeparam>
        </member>
        <member name="M:Xunit.Sdk.AssertEqualityComparer`1.#ctor(System.Boolean,System.Collections.IEqualityComparer)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.AssertEqualityComparer`1"/> class.
            </summary>
            <param name="skipTypeCheck">Set to <c>true</c> to skip type equality checks.</param>
            <param name="innerComparer">The inner comparer to be used when the compared objects are enumerable.</param>
        </member>
        <member name="M:Xunit.Sdk.AssertEqualityComparer`1.Equals(`0,`0)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.AssertEqualityComparer`1.GetHashCode(`0)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.AssertEqualityComparerAdapter`1">
            <summary>
            A class that wraps <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to create <see cref="T:System.Collections.IEqualityComparer"/>.
            </summary>
            <typeparam name="T">The type that is being compared.</typeparam>
        </member>
        <member name="M:Xunit.Sdk.AssertEqualityComparerAdapter`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.AssertEqualityComparerAdapter`1"/> class.
            </summary>
            <param name="innerComparer">The comparer that is being adapted.</param>
        </member>
        <member name="M:Xunit.Sdk.AssertEqualityComparerAdapter`1.Equals(System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.AssertEqualityComparerAdapter`1.GetHashCode(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.CollectionAttribute">
            <summary>
            Used to declare a specific test collection for a test class.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.AttributeBase">
            <summary>
            This class exists to have a base class for attributes that don't run afoul of
            the brain-dead caching algorithm in the CLR's attribute discovery system.
            Thanks, CLR team.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.AttributeBase.TypeId">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.CollectionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.CollectionAttribute"/> class.
            </summary>
            <param name="name">The test collection name.</param>
        </member>
        <member name="T:Xunit.CollectionBehavior">
            <summary>
            Defines the built-in behavior types for collections in xUnit.net.
            </summary>
        </member>
        <member name="F:Xunit.CollectionBehavior.CollectionPerAssembly">
            <summary>
            By default, generates a collection per assembly, and any test classes that are not
            decorated with <see cref="T:Xunit.CollectionAttribute"/> will be placed into the assembly-level
            collection.
            </summary>
        </member>
        <member name="F:Xunit.CollectionBehavior.CollectionPerClass">
            <summary>
            By default, generates a collection per test class for any test classes that are not
            decorated with <see cref="T:Xunit.CollectionAttribute"/>.
            </summary>
        </member>
        <member name="T:Xunit.CollectionDefinitionAttribute">
            <summary>
            Used to declare a test collection container class. The container class gives
            developers a place to attach interfaces like <see cref="T:Xunit.IClassFixture`1"/> and
            <see cref="T:Xunit.ICollectionFixture`1"/> that will be applied to all tests classes
            that are members of the test collection.
            </summary>
        </member>
        <member name="M:Xunit.CollectionDefinitionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.CollectionDefinitionAttribute"/> class.
            </summary>
            <param name="name">The test collection name.</param>
        </member>
        <member name="T:Xunit.Extensions.AssumeIdentityAttribute">
            <summary>
            Apply this attribute to your test method to replace the 
            <see cref="P:System.Threading.Thread.CurrentPrincipal"/> with another role.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.BeforeAfterTestAttribute">
            <summary>
            Base attribute which indicates a test method interception (allows code to be run before and
            after the test is run).
            </summary>
        </member>
        <member name="M:Xunit.Sdk.BeforeAfterTestAttribute.After(System.Reflection.MethodInfo)">
            <summary>
            This method is called after the test method is executed.
            </summary>
            <param name="methodUnderTest">The method under test</param>
        </member>
        <member name="M:Xunit.Sdk.BeforeAfterTestAttribute.Before(System.Reflection.MethodInfo)">
            <summary>
            This method is called before the test method is executed.
            </summary>
            <param name="methodUnderTest">The method under test</param>
        </member>
        <member name="P:Xunit.Sdk.BeforeAfterTestAttribute.TypeId">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Extensions.AssumeIdentityAttribute.#ctor(System.String)">
            <summary>
            Replaces the identity of the current thread with <paramref name="roleName"/>.
            </summary>
            <param name="roleName">The role's name</param>
        </member>
        <member name="M:Xunit.Extensions.AssumeIdentityAttribute.After(System.Reflection.MethodInfo)">
            <summary>
            Restores the original <see cref="P:System.Threading.Thread.CurrentPrincipal"/>.
            </summary>
            <param name="methodUnderTest">The method under test</param>
        </member>
        <member name="M:Xunit.Extensions.AssumeIdentityAttribute.Before(System.Reflection.MethodInfo)">
            <summary>
            Stores the current <see cref="P:System.Threading.Thread.CurrentPrincipal"/> and replaces it with
            a new role identified in constructor.
            </summary>
            <param name="methodUnderTest">The method under test</param>
        </member>
        <member name="P:Xunit.Extensions.AssumeIdentityAttribute.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="T:Xunit.Extensions.AutoRollbackAttribute">
            <summary>
            Apply this attribute to your test method to automatically create a
            <see cref="T:System.Transactions.TransactionScope"/> that is rolled back when the test is
            finished.
            </summary>
        </member>
        <member name="M:Xunit.Extensions.AutoRollbackAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Extensions.AutoRollbackAttribute"/> class.
            </summary>
        </member>
        <member name="M:Xunit.Extensions.AutoRollbackAttribute.After(System.Reflection.MethodInfo)">
            <summary>
            Rolls back the transaction.
            </summary>
        </member>
        <member name="M:Xunit.Extensions.AutoRollbackAttribute.Before(System.Reflection.MethodInfo)">
            <summary>
            Creates the transaction.
            </summary>
        </member>
        <member name="P:Xunit.Extensions.AutoRollbackAttribute.IsolationLevel">
            <summary>
            Gets or sets the isolation level of the transaction.
            Default value is <see cref="P:Xunit.Extensions.AutoRollbackAttribute.IsolationLevel"/>.Unspecified.
            </summary>
        </member>
        <member name="P:Xunit.Extensions.AutoRollbackAttribute.ScopeOption">
            <summary>
            Gets or sets the scope option for the transaction.
            Default value is <see cref="T:System.Transactions.TransactionScopeOption"/>.Required.
            </summary>
        </member>
        <member name="T:Xunit.Extensions.UseCultureAttribute">
            <summary>
            Apply this attribute to your test method to replace the
            <see cref="P:System.Threading.Thread.CurrentThread"/> <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> and
            <see cref="P:System.Globalization.CultureInfo.CurrentUICulture"/> with another culture.
            </summary>
        </member>
        <member name="M:Xunit.Extensions.UseCultureAttribute.#ctor(System.String)">
            <summary>
            Replaces the culture and UI culture of the current thread with
            <paramref name="culture"/>
            </summary>
            <param name="culture">The name of the culture.</param>
            <remarks>
            <para>
            This constructor overload uses <paramref name="culture"/> for both
            <see cref="P:Xunit.Extensions.UseCultureAttribute.Culture"/> and <see cref="P:Xunit.Extensions.UseCultureAttribute.UICulture"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Xunit.Extensions.UseCultureAttribute.#ctor(System.String,System.String)">
            <summary>
            Replaces the culture and UI culture of the current thread with
            <paramref name="culture" /> and <paramref name="uiCulture" />
            </summary>
            <param name="culture">The name of the culture.</param>
            <param name="uiCulture">The name of the UI culture.</param>
        </member>
        <member name="M:Xunit.Extensions.UseCultureAttribute.Before(System.Reflection.MethodInfo)">
            <summary>
            Stores the current <see cref="P:System.Threading.Thread.CurrentPrincipal"/>
            <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> and <see cref="P:System.Globalization.CultureInfo.CurrentUICulture"/>
            and replaces them with the new cultures defined in the constructor.
            </summary>
            <param name="methodUnderTest">The method under test</param>
        </member>
        <member name="M:Xunit.Extensions.UseCultureAttribute.After(System.Reflection.MethodInfo)">
            <summary>
            Restores the original <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> and
            <see cref="P:System.Globalization.CultureInfo.CurrentUICulture"/> to <see cref="P:System.Threading.Thread.CurrentPrincipal"/>
            </summary>
            <param name="methodUnderTest">The method under test</param>
        </member>
        <member name="P:Xunit.Extensions.UseCultureAttribute.Culture">
            <summary>
            Gets the culture.
            </summary>
        </member>
        <member name="P:Xunit.Extensions.UseCultureAttribute.UICulture">
            <summary>
            Gets the UI culture.
            </summary>
        </member>
        <member name="T:Xunit.IClassFixture`1">
            <summary>
            Used to decorate xUnit.net test classes and collections to indicate a test which has
            per-test-class fixture data. An instance of the fixture data is initialized just before
            the first test in the class is run, and if it implements IDisposable, is disposed
            after the last test in the class is run. To gain access to the fixture data from
            inside the test, a constructor argument should be added to the test class which
            exactly matches the <typeparamref name="TFixture"/>.
            </summary>
            <typeparam name="TFixture">The type of the fixture.</typeparam>
        </member>
        <member name="T:Xunit.ICollectionFixture`1">
            <summary>
            Used to decorate xUnit.net test classes and collections to indicate a test which has
            per-test-collection fixture data. An instance of the fixture data is initialized just before
            the first test in the collection is run, and if it implements IDisposable, is disposed
            after the last test in the collection is run. To gain access to the fixture data from
            inside the test, a constructor argument should be added to the test class which
            exactly matches the <typeparamref name="TFixture"/>.
            </summary>
            <typeparam name="TFixture">The type of the fixture.</typeparam>
        </member>
        <member name="T:Xunit.Sdk.DefaultTestCaseOrderer">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.ITestCaseOrderer"/>. Orders tests in
            an unpredictable but stable order, so that repeated test runs of the
            identical test assembly run tests in the same order.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ITestCaseOrderer">
            <summary>
            A class implements this interface to participate in ordering tests
            for the test runner. Test case orderers are applied using the
            <see cref="T:Xunit.TestCaseOrdererAttribute"/>, which can be applied at
            the assembly, test collection, and test class level.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ITestCaseOrderer.OrderTestCases(System.Collections.Generic.IEnumerable{Xunit.Sdk.XunitTestCase})">
            <summary>
            Orders test cases for execution.
            </summary>
            <param name="testCases">The test cases to be ordered.</param>
            <returns>The test cases in the order to be run.</returns>
        </member>
        <member name="M:Xunit.Sdk.DefaultTestCaseOrderer.OrderTestCases(System.Collections.Generic.IEnumerable{Xunit.Sdk.XunitTestCase})">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.EnvironmentalWarning">
            <summary>
            Messages reported during test discovery that indicate that there is an issue with the
            test environment (for example, declaring two test collection classes with the same
            test collection name).
            </summary>
        </member>
        <member name="P:Xunit.Sdk.EnvironmentalWarning.Message">
            <summary>
            The warning message.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ExceptionUtility">
            <summary>
            Utility methods for dealing with exceptions.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ExceptionUtility.GetMessage(System.Exception)">
            <summary>
            Gets the message for the exception, including any inner exception messages.
            </summary>
            <param name="ex">The exception</param>
            <returns>The formatted message</returns>
        </member>
        <member name="M:Xunit.Sdk.ExceptionUtility.GetStackTrace(System.Exception)">
            <summary>
            Gets the stack trace for the exception, including any inner exceptions.
            </summary>
            <param name="ex">The exception</param>
            <returns>The formatted stack trace</returns>
        </member>
        <member name="T:Xunit.Sdk.MessageAggregator">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.IMessageAggregator"/>.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.IMessageAggregator">
            <summary>
            Represents an aggregator which collects and returns messages of arbitrary types.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.IMessageAggregator.Add``1(``0)">
            <summary>
            Adds the specified message to the aggregation for the given type.
            </summary>
            <typeparam name="TMessage">The type of the message.</typeparam>
            <param name="message">The message.</param>
        </member>
        <member name="M:Xunit.Sdk.IMessageAggregator.GetAndClear``1">
            <summary>
            Returns all the currently aggregated messages of the given type, and clears
            the list for future iterations.
            </summary>
            <typeparam name="TMessage">The type of the message.</typeparam>
            <returns>The aggregated messages.</returns>
        </member>
        <member name="F:Xunit.Sdk.MessageAggregator.Instance">
            <summary>
            Gets the singleton instance of <see cref="T:Xunit.Sdk.MessageAggregator"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.MessageAggregator.Add``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.MessageAggregator.GetAndClear``1">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.ExceptionAggregator">
            <summary>
            Aggregates exceptions. Intended to run one or more code blocks, and collect the
            exceptions thrown by those code blocks.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ExceptionAggregator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.ExceptionAggregator"/> class.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ExceptionAggregator.#ctor(Xunit.Sdk.ExceptionAggregator)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.ExceptionAggregator"/> class that
            contains the exception list of its parent.
            </summary>
            <param name="parent">The parent aggregator to copy exceptions from.</param>
        </member>
        <member name="M:Xunit.Sdk.ExceptionAggregator.Add(System.Exception)">
            <summary>
            Adds an exception to the aggregator.
            </summary>
            <param name="ex">The exception to be added.</param>
        </member>
        <member name="M:Xunit.Sdk.ExceptionAggregator.Run(System.Action)">
            <summary>
            Runs the code, catching the exception that is thrown and adding it to
            the aggregate.
            </summary>
            <param name="code">The code to be run.</param>
        </member>
        <member name="M:Xunit.Sdk.ExceptionAggregator.ToException">
            <summary>
            Returns an exception that represents the exceptions thrown by the code
            passed to the <see cref="M:Xunit.Sdk.ExceptionAggregator.Run(System.Action)"/> method.
            </summary>
            <returns>Returns <c>null</c> if no exceptions were thrown; returns the
            exact exception is a single exception was thrown; returns <see cref="T:System.AggregateException"/>
            if more than one exception was thrown.</returns>
        </member>
        <member name="P:Xunit.Sdk.ExceptionAggregator.HasExceptions">
            <summary>
            Returns <c>true</c> if the aggregator has at least one exception inside it.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.CollectionPerClassTestCollectionFactory">
            <summary>
            Implementation of <see cref="T:Xunit.Sdk.IXunitTestCollectionFactory"/> which creates a new test
            collection for each test class that isn't decorated with <see cref="T:Xunit.CollectionAttribute"/>.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.IXunitTestCollectionFactory">
            <summary>
            This interface is intended to be implemented by components which generate test collections.
            End users specify the desired test collection factory by applying <see cref="T:Xunit.CollectionBehaviorAttribute"/>
            at the assembly level.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.IXunitTestCollectionFactory.Get(Xunit.Abstractions.ITypeInfo)">
            <summary>
            Gets the test collection for a given test class.
            </summary>
            <param name="testClass">The test class.</param>
            <returns>The test collection.</returns>
        </member>
        <member name="P:Xunit.Sdk.IXunitTestCollectionFactory.DisplayName">
            <summary>
            Gets the display name for the test collection factory. This information is shown to the end
            user as part of the description of the test environment.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.CollectionPerClassTestCollectionFactory.#ctor(Xunit.Abstractions.IAssemblyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.CollectionPerClassTestCollectionFactory"/> class.
            </summary>
            <param name="assemblyInfo">The assembly.</param>
        </member>
        <member name="M:Xunit.Sdk.CollectionPerClassTestCollectionFactory.#ctor(Xunit.Abstractions.IAssemblyInfo,Xunit.Sdk.IMessageAggregator)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.CollectionPerClassTestCollectionFactory"/> class.
            </summary>
            <param name="assemblyInfo">The assembly info.</param>
            <param name="messageAggregator">The message aggregator used to report <see cref="T:Xunit.Sdk.EnvironmentalWarning"/> messages.</param>
        </member>
        <member name="M:Xunit.Sdk.CollectionPerClassTestCollectionFactory.Get(Xunit.Abstractions.ITypeInfo)">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.CollectionPerClassTestCollectionFactory.DisplayName">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.LambdaTestCase">
            <summary>
            A simple implementation of <see cref="T:Xunit.Sdk.XunitTestCase"/> wherein the running of the
            test case can be represented by an <see cref="T:System.Action"/>. Useful for emitting test
            cases which later evaluate to error messages (since throwing error messages during
            discovery is often the wrong thing to do). See <see cref="T:Xunit.Sdk.TheoryDiscoverer"/> for
            a use of this test case to emit an error message when a theory method is found
            that has no test data associated with it.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.XunitTestCase">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestCase"/> for xUnit v2 that supports tests decorated with
            both <see cref="T:Xunit.FactAttribute"/> and <see cref="T:Xunit.TheoryAttribute"/>.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.LongLivedMarshalByRefObject">
            <summary>
            This class inherits from <see cref="T:System.MarshalByRefObject"/> and reimplements
            <see cref="M:Xunit.Sdk.LongLivedMarshalByRefObject.InitializeLifetimeService"/> in a way that allows the object to live
            longer than the remoting default lifetime (5 minutes).
            </summary>
        </member>
        <member name="M:Xunit.Sdk.LongLivedMarshalByRefObject.InitializeLifetimeService">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.LongLivedMarshalByRefObject.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCase.#ctor(Xunit.Abstractions.ITestCollection,Xunit.Abstractions.IAssemblyInfo,Xunit.Abstractions.ITypeInfo,Xunit.Abstractions.IMethodInfo,Xunit.Abstractions.IAttributeInfo,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.XunitTestCase"/> class.
            </summary>
            <param name="testCollection">The test collection this test case belongs to.</param>
            <param name="assembly">The test assembly.</param>
            <param name="type">The test class.</param>
            <param name="method">The test method.</param>
            <param name="factAttribute">The instance of the <see cref="T:Xunit.FactAttribute"/>.</param>
            <param name="arguments">The arguments for the test method.</param>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCase.ConvertArguments(System.Object[],System.Type[])">
            <summary>
            Converts arguments into their target types.
            </summary>
            <param name="args">The arguments to be converted.</param>
            <param name="types">The target types for the conversion.</param>
            <returns>The converted arguments.</returns>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCase.GetBeforeAfterAttributes(System.Type,System.Reflection.MethodInfo)">
            <summary>
            Gets the <see cref="T:Xunit.Sdk.BeforeAfterTestAttribute"/> instances for a test method.
            </summary>
            <param name="classUnderTest">The class under test.</param>
            <param name="methodUnderTest">The method under test.</param>
            <returns>The list of <see cref="T:Xunit.Sdk.BeforeAfterTestAttribute"/> instances.</returns>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCase.GetDisplayNameWithArguments(System.String,System.Object[])">
            <summary>
            Supplements a display name for a test method with its arguments.
            </summary>
            <param name="displayName">The base display name.</param>
            <param name="arguments">The test method's arguments.</param>
            <returns>The supplemented display name.</returns>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCase.GetRuntimeClass">
            <summary>
            Gets the <see cref="T:System.Type"/> of the class under test.
            </summary>
            <returns>The type under test, if possible; null, if not available.</returns>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCase.GetRuntimeMethod(System.Type)">
            <summary>
            Gets the <see cref="T:System.Reflection.MethodInfo"/> of the method under test.
            </summary>
            <param name="type">The type the method is attached to.</param>
            <returns>The method under test, if possible; null, if not available.</returns>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCase.Run(Xunit.Abstractions.IMessageSink,System.Object[],Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource)">
            <summary>
            Executes the test case, returning 0 or more result messages through the message sink.
            </summary>
            <param name="messageSink">The message sink to report results to.</param>
            <param name="constructorArguments">The arguments to pass to the constructor.</param>
            <param name="aggregator">The error aggregator to use for catching exception.</param>
            <param name="cancellationTokenSource">The cancellation token source that indicates whether cancellation has been requested.</param>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCase.RunTests(Xunit.Abstractions.IMessageSink,System.Object[],Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource)">
            <summary>
            Run the tests in the test case.
            </summary>
            <param name="messageSink">The message sink to send results to.</param>
            <param name="constructorArguments">The arguments to pass to the constructor.</param>
            <param name="aggregator">The error aggregator to use for catching exception.</param>
            <param name="cancellationTokenSource">The cancellation token source that indicates whether cancellation has been requested.</param>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCase.RunTestsOnMethod(Xunit.Abstractions.IMessageSink,System.Type,System.Object[],System.Reflection.MethodInfo,System.Collections.Generic.List{Xunit.Sdk.BeforeAfterTestAttribute},Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource,System.Decimal@)">
            <summary>
            Runs the tests for a given test method.
            </summary>
            <param name="messageSink">The message sink to send results to.</param>
            <param name="classUnderTest">The class under test.</param>
            <param name="constructorArguments">The arguments to pass to the constructor.</param>
            <param name="methodUnderTest">The method under test.</param>
            <param name="beforeAfterAttributes">The <see cref="T:Xunit.Sdk.BeforeAfterTestAttribute"/> instances attached to the test.</param>
            <param name="aggregator">The error aggregator to use for catching exception.</param>
            <param name="cancellationTokenSource">The cancellation token source that indicates whether cancellation has been requested.</param>
            <param name="executionTime">The time spent executing the tests.</param>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCase.RunTestWithArguments(Xunit.Abstractions.IMessageSink,System.Type,System.Object[],System.Reflection.MethodInfo,System.Object[],System.String,System.Collections.Generic.List{Xunit.Sdk.BeforeAfterTestAttribute},Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource,System.Decimal@)">
            <summary>
            Runs a single test for a given test method.
            </summary>
            <param name="messageSink">The message sink to send results to.</param>
            <param name="classUnderTest">The class under test.</param>
            <param name="constructorArguments">The arguments to pass to the constructor.</param>
            <param name="methodUnderTest">The method under test.</param>
            <param name="testMethodArguments">The arguments to pass to the test method.</param>
            <param name="displayName">The display name for the test.</param>
            <param name="beforeAfterAttributes">The <see cref="T:Xunit.Sdk.BeforeAfterTestAttribute"/> instances attached to the test.</param>
            <param name="parentAggregator">The parent aggregator that contains the exceptions up to this point.</param>
            <param name="cancellationTokenSource">The cancellation token source that indicates whether cancellation has been requested.</param>
            <param name="executionTime">The time spent executing the tests.</param>
        </member>
        <member name="P:Xunit.Sdk.XunitTestCase.Arguments">
            <summary>
            The arguments that will be passed to the test method.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.XunitTestCase.Assembly">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.XunitTestCase.Class">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.XunitTestCase.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.XunitTestCase.Method">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.XunitTestCase.SkipReason">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.XunitTestCase.SourceInformation">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.XunitTestCase.TestCollection">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.XunitTestCase.Traits">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.XunitTestCase.UniqueID">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.LambdaTestCase.#ctor(Xunit.Abstractions.ITestCollection,Xunit.Abstractions.IAssemblyInfo,Xunit.Abstractions.ITypeInfo,Xunit.Abstractions.IMethodInfo,Xunit.Abstractions.IAttributeInfo,System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.LambdaTestCase"/> class.
            </summary>
            <param name="testCollection">The test collection this test case belongs to.</param>
            <param name="assembly">The test assembly.</param>
            <param name="testClass">The test class.</param>
            <param name="testMethod">The test method.</param>
            <param name="factAttribute">The instance of <see cref="T:Xunit.FactAttribute"/>.</param>
            <param name="lambda">The code to run for the test.</param>
        </member>
        <member name="M:Xunit.Sdk.LambdaTestCase.RunTests(Xunit.Abstractions.IMessageSink,System.Object[],Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestCollectionFactoryHelper">
            <summary>
            A helper class that gets the list of test collection definitions for a given assembly.
            Reports any misconfigurations of the test assembly via <see cref="T:Xunit.Sdk.IMessageAggregator"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestCollectionFactoryHelper.GetTestCollectionDefinitions(Xunit.Abstractions.IAssemblyInfo,Xunit.Sdk.IMessageAggregator)">
            <summary>
            Gets the test collection definitions for the given assembly.
            </summary>
            <param name="assemblyInfo">The assembly.</param>
            <param name="messageAggregator">The message aggregator.</param>
            <returns>A list of mappings from test collection name to test collection definitions (as <see cref="T:Xunit.Abstractions.ITypeInfo"/></returns>
        </member>
        <member name="T:Xunit.Sdk.XunitTestCollection">
            <summary>
            The implementation of <see cref="T:Xunit.Abstractions.ITestCollection"/> that is used by xUnit.net v2.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.XunitTestCollection"/> class.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitTestCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.XunitTestCollection.CollectionDefinition">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.XunitTestCollection.DisplayName">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.CollectionPerAssemblyTestCollectionFactory">
            <summary>
            Implementation of <see cref="T:Xunit.Sdk.IXunitTestCollectionFactory"/> that creates a single
            default test collection for the assembly, and places any tests classes without
            the <see cref="T:Xunit.CollectionAttribute"/> into it.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.CollectionPerAssemblyTestCollectionFactory.#ctor(Xunit.Abstractions.IAssemblyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.CollectionPerAssemblyTestCollectionFactory"/> class.
            </summary>
            <param name="assemblyInfo">The assembly.</param>
        </member>
        <member name="M:Xunit.Sdk.CollectionPerAssemblyTestCollectionFactory.#ctor(Xunit.Abstractions.IAssemblyInfo,Xunit.Sdk.IMessageAggregator)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.CollectionPerAssemblyTestCollectionFactory"/> class.
            </summary>
            <param name="assemblyInfo">The assembly.</param>
            <param name="messageAggregator">The message aggregator used to report <see cref="T:Xunit.Sdk.EnvironmentalWarning"/> messages.</param>
        </member>
        <member name="M:Xunit.Sdk.CollectionPerAssemblyTestCollectionFactory.Get(Xunit.Abstractions.ITypeInfo)">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.CollectionPerAssemblyTestCollectionFactory.DisplayName">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.XunitTheoryTestCase">
            <summary>
            Represents a test case which runs multiple tests for theory data, either because the
            data was not enumerable or because the data was not serializable.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitTheoryTestCase.#ctor(Xunit.Abstractions.ITestCollection,Xunit.Abstractions.IAssemblyInfo,Xunit.Abstractions.ITypeInfo,Xunit.Abstractions.IMethodInfo,Xunit.Abstractions.IAttributeInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.XunitTheoryTestCase"/> class.
            </summary>
            <param name="testCollection">The test collection this theory belongs to.</param>
            <param name="assembly">The test assembly.</param>
            <param name="type">The type under test.</param>
            <param name="method">The method under test.</param>
            <param name="theoryAttribute">The theory attribute.</param>
        </member>
        <member name="M:Xunit.Sdk.XunitTheoryTestCase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="M:Xunit.Sdk.XunitTheoryTestCase.RunTestsOnMethod(Xunit.Abstractions.IMessageSink,System.Type,System.Object[],System.Reflection.MethodInfo,System.Collections.Generic.List{Xunit.Sdk.BeforeAfterTestAttribute},Xunit.Sdk.ExceptionAggregator,System.Threading.CancellationTokenSource,System.Decimal@)">
            <inheritdoc />
        </member>
        <member name="T:Xunit.Sdk.InlineDataDiscoverer">
            <summary>
            Implementation of <see cref="T:Xunit.Sdk.IDataDiscoverer"/> used to discover the data
            provided by <see cref="T:Xunit.InlineDataAttribute"/>.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.IDataDiscoverer">
            <summary>
            This class is responsible for discovering the data available in an implementation
            of <see cref="T:Xunit.Sdk.DataAttribute"/>. The discovery process may not always have access
            to reflection (i.e., running in Resharper), so the discoverer must make a best
            effort to return data, but may return null when there is not enough information
            available (for example, if reflection is required to answer the question).
            </summary>
        </member>
        <member name="M:Xunit.Sdk.IDataDiscoverer.GetData(Xunit.Abstractions.IAttributeInfo,Xunit.Abstractions.IMethodInfo)">
            <summary>
            Returns the data to be used to test the theory.
            </summary>
            <remarks>
            This will be called during
            discovery, at which point the <paramref name="testMethod"/> may or may not
            be backed by reflection (i.e., implementing <see cref="T:Xunit.Abstractions.IReflectionMethodInfo"/>).
            If the data is not available because reflection is required, then you may return
            null to inform xUnit that the quantity of data is unknown at this point.
            When the tests are run, if you returned back null during discovery, then this method
            will be called again to retrieve the data, this time guaranteed to provide
            an implementation of <see cref="T:Xunit.Abstractions.IReflectionMethodInfo"/>. At this time, you
            must return the actual data, and returning null is not legal.
            </remarks>
            <param name="dataAttribute">The data attribute being discovered</param>
            <param name="testMethod">The method that is being tested/discovered</param>
            <returns>The theory data (or null during discovery, if not enough
            information is available to enumerate the data)</returns>
        </member>
        <member name="M:Xunit.Sdk.InlineDataDiscoverer.GetData(Xunit.Abstractions.IAttributeInfo,Xunit.Abstractions.IMethodInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.PropertyDataAttribute">
            <summary>
            Provides a data source for a data theory, with the data coming from a public static property on the test class.
            The property must return IEnumerable&lt;object[]&gt; with the test data.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.DataAttribute">
            <summary>
            Abstract attribute which represents a data source for a data theory.
            Data source providers derive from this attribute and implement GetData
            to return the data for the theory.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.DataAttribute.GetData(System.Reflection.MethodInfo)">
            <summary>
            Returns the data to be used to test the theory.
            </summary>
            <param name="testMethod">The method that is being tested</param>
            <returns>One or more sets of theory data. Each invocation of the test method
            is represented by a single object array.</returns>
        </member>
        <member name="M:Xunit.PropertyDataAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:Xunit.PropertyDataAttribute"/>/
            </summary>
            <param name="propertyName">The name of the public static property on the test class that will provide the test data</param>
        </member>
        <member name="M:Xunit.PropertyDataAttribute.GetData(System.Reflection.MethodInfo)">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.PropertyDataAttribute.PropertyName">
            <summary>
            Gets the property name.
            </summary>
        </member>
        <member name="P:Xunit.PropertyDataAttribute.PropertyType">
            <summary>
            Gets or sets the type to retrieve the property data from. If not set, then the property will be
            retrieved from the unit test class.
            </summary>
        </member>
        <member name="T:Xunit.FactAttribute">
            <summary>
            Attribute that is applied to a method to indicate that it is a fact that should be run
            by the test runner. It can also be extended to support a customized definition of a
            test method.
            </summary>
        </member>
        <member name="P:Xunit.FactAttribute.DisplayName">
            <summary>
            Gets the name of the test to be used when the test is skipped. Defaults to
            null, which will cause the fully qualified test name to be used.
            </summary>
        </member>
        <member name="P:Xunit.FactAttribute.Skip">
            <summary>
            Marks the test so that it will not be run, and gets or sets the skip reason
            </summary>
        </member>
        <member name="P:Xunit.FactAttribute.Timeout">
            <summary>
            Marks the test as failing if it does not finish running within the given time
            period, in milliseconds; set to 0 or less to indicate the method has no timeout
            </summary>
        </member>
        <member name="T:Xunit.InlineDataAttribute">
            <summary>
            Provides a data source for a data theory, with the data coming from inline values.
            </summary>
        </member>
        <member name="M:Xunit.InlineDataAttribute.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.InlineDataAttribute"/> class.
            </summary>
            <param name="data">The data values to pass to the theory.</param>
        </member>
        <member name="M:Xunit.InlineDataAttribute.GetData(System.Reflection.MethodInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.AssemblyLoader">
            <summary>
            This is an internal class, and is not intended to be called from end-user code.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.IAssemblyLoader">
            <summary>
            This is an internal interface, and is not intended to be called from end-user code.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.IAssemblyLoader.Load(System.String)">
            <summary/>
        </member>
        <member name="M:Xunit.Sdk.AssemblyLoader.Load(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.DataDiscoverer">
            <summary>
            Default implementation of <see cref="T:Xunit.Sdk.IDataDiscoverer"/>. Uses reflection to find the
            data associated with <see cref="T:Xunit.Sdk.DataAttribute"/>; may return <c>null</c> when called
            without reflection-based abstraction implementations.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.DataDiscoverer.GetData(Xunit.Abstractions.IAttributeInfo,Xunit.Abstractions.IMethodInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.DataDiscovererAttribute">
            <summary>
            An attribute used to decorate classes which derive from <see cref="T:Xunit.Sdk.DataAttribute"/>,
            to indicate how data elements should be discovered.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.DataDiscovererAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes an instance of <see cref="T:Xunit.Sdk.DataDiscovererAttribute"/>.
            </summary>
            <param name="typeName">The fully qualified type name of the discoverer
            (f.e., 'Xunit.Sdk.DataDiscoverer')</param>
            <param name="assemblyName">The name of the assembly that the discoverer type
            is located in, without file extension (f.e., 'xunit2')</param>
        </member>
        <member name="T:Xunit.Sdk.FactDiscoverer">
            <summary>
            Implementation of <see cref="T:Xunit.Sdk.IXunitDiscoverer"/> that supports finding test cases
            on methods decorated with <see cref="T:Xunit.FactAttribute"/>.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.IXunitDiscoverer">
            <summary>
            Interface to be implemented by classes which are used to discover tests cases attached
            to test methods that are attributed with <see cref="T:Xunit.FactAttribute"/> (or a subclass).
            </summary>
        </member>
        <member name="M:Xunit.Sdk.IXunitDiscoverer.Discover(Xunit.Abstractions.ITestCollection,Xunit.Abstractions.IAssemblyInfo,Xunit.Abstractions.ITypeInfo,Xunit.Abstractions.IMethodInfo,Xunit.Abstractions.IAttributeInfo)">
            <summary>
            Discover test cases from a test method.
            </summary>
            <param name="testCollection">The test collection the test cases belong to.</param>
            <param name="assembly">The test assembly.</param>
            <param name="testClass">The test class.</param>
            <param name="testMethod">The test method.</param>
            <param name="factAttribute">The fact attribute attached to the test method.</param>
            <returns>Returns zero or more test cases represented by the test method.</returns>
        </member>
        <member name="M:Xunit.Sdk.FactDiscoverer.Discover(Xunit.Abstractions.ITestCollection,Xunit.Abstractions.IAssemblyInfo,Xunit.Abstractions.ITypeInfo,Xunit.Abstractions.IMethodInfo,Xunit.Abstractions.IAttributeInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TheoryDiscoverer">
            <summary>
            Implementation of <see cref="T:Xunit.Sdk.IXunitDiscoverer"/> that supports finding test cases
            on methods decorated with <see cref="T:Xunit.TheoryAttribute"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TheoryDiscoverer.Discover(Xunit.Abstractions.ITestCollection,Xunit.Abstractions.IAssemblyInfo,Xunit.Abstractions.ITypeInfo,Xunit.Abstractions.IMethodInfo,Xunit.Abstractions.IAttributeInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestCaseDiscovererAttribute">
            <summary>
            An attribute used to decorate classes which derive from <see cref="T:Xunit.FactAttribute"/>,
            to indicate how test cases should be discovered.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestCaseDiscovererAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes an instance of the <see cref="T:Xunit.Sdk.TestCaseDiscovererAttribute"/> class.
            </summary>
            <param name="typeName">The fully qualified type name of the discoverer
            (f.e., 'Xunit.Sdk.FactDiscoverer')</param>
            <param name="assemblyName">The name of the assembly that the discoverer type
            is located in, without file extension (f.e., 'xunit2')</param>
        </member>
        <member name="T:Xunit.Sdk.XunitTestFramework">
            <summary>
            The implementation of <see cref="T:Xunit.Abstractions.ITestFramework"/> that supports discovery and
            execution of unit tests linked against xunit2.dll.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitTestFramework.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.XunitTestFramework"/> class.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitTestFramework.GetDiscoverer(Xunit.Abstractions.IAssemblyInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitTestFramework.GetExecutor(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.XunitTestFramework.SourceInformationProvider">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.XunitTestFrameworkDiscoverer">
            <summary>
            The implementation of <see cref="T:Xunit.Abstractions.ITestFrameworkDiscoverer"/> that supports discovery
            of unit tests linked against xunit2.dll.
            </summary>
        </member>
        <member name="F:Xunit.Sdk.XunitTestFrameworkDiscoverer.DisplayName">
            <summary>
            Gets the display name of the xUnit.net v2 test framework.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitTestFrameworkDiscoverer.#ctor(Xunit.Abstractions.IAssemblyInfo,Xunit.Abstractions.ISourceInformationProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.XunitTestFrameworkDiscoverer"/> class.
            </summary>
            <param name="assemblyInfo">The test assembly.</param>
            <param name="sourceProvider">The source information provider.</param>
        </member>
        <member name="M:Xunit.Sdk.XunitTestFrameworkDiscoverer.#ctor(Xunit.Abstractions.IAssemblyInfo,Xunit.Abstractions.ISourceInformationProvider,Xunit.Sdk.IXunitTestCollectionFactory,Xunit.Sdk.IMessageAggregator)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.XunitTestFrameworkDiscoverer"/> class.
            </summary>
            <param name="assemblyInfo">The test assembly.</param>
            <param name="sourceProvider">The source information provider.</param>
            <param name="collectionFactory">The test collection factory used to look up test collections.</param>
            <param name="messageAggregator">The message aggregator to receive environmental warnings from.</param>
        </member>
        <member name="M:Xunit.Sdk.XunitTestFrameworkDiscoverer.Find(System.Boolean,Xunit.Abstractions.IMessageSink)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitTestFrameworkDiscoverer.Find(System.String,System.Boolean,Xunit.Abstractions.IMessageSink)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitTestFrameworkDiscoverer.FindImpl(Xunit.Abstractions.ITypeInfo,System.Boolean,Xunit.Abstractions.IMessageSink)">
            <summary>
            Core implementation to discover unit tests in a given test class.
            </summary>
            <param name="type">The test class.</param>
            <param name="includeSourceInformation">Set to <c>true</c> to attempt to include source information.</param>
            <param name="messageSink">The message sink to send discovery messages to.</param>
            <returns>Returns <c>true</c> if discovery should continue; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Xunit.Sdk.XunitTestFrameworkDiscoverer.Serialize(Xunit.Abstractions.ITestCase)">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.XunitTestFrameworkDiscoverer.TestCollectionFactory">
            <summary>
            Gets the test collection factory that makes test collections.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.XunitTestFrameworkDiscoverer.TestFrameworkDisplayName">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.XunitTestFrameworkExecutor">
            <summary>
            The implementation of <see cref="T:Xunit.Abstractions.ITestFrameworkExecutor"/> that supports execution
            of unit tests linked against xunit2.dll.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.XunitTestFrameworkExecutor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.XunitTestFrameworkExecutor"/> class.
            </summary>
            <param name="assemblyFileName">Path of the test assembly.</param>
        </member>
        <member name="M:Xunit.Sdk.XunitTestFrameworkExecutor.Deserialize(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.XunitTestFrameworkExecutor.Run(System.Collections.Generic.IEnumerable{Xunit.Abstractions.ITestCase},Xunit.Abstractions.IMessageSink)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.IMessageBus">
            <summary>
            This is an internal interface, and is not intended to be called from end-user code.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.IMessageBus.QueueMessage(Xunit.Abstractions.IMessageSinkMessage)">
            <summary/>
        </member>
        <member name="T:Xunit.Sdk.MessageBus">
            <summary>
            This is an internal class, and is not intended to be called from end-user code.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.MessageBus.#ctor(Xunit.Abstractions.IMessageSink)">
            <summary/>
        </member>
        <member name="M:Xunit.Sdk.MessageBus.Dispose">
            <summary/>
        </member>
        <member name="M:Xunit.Sdk.MessageBus.QueueMessage(Xunit.Abstractions.IMessageSinkMessage)">
            <summary/>
        </member>
        <member name="P:Xunit.Sdk.TestCollectionMessage.TestCollection">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestCaseMessage.TestCase">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestClassMessage.ClassName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestMessage.TestDisplayName">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.BeforeTestFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.IBeforeTestFinished"/>.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.BeforeTestFinished.AttributeName">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.BeforeTestStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.IBeforeTestStarting"/>.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.BeforeTestStarting.AttributeName">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.AfterTestFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.IAfterTestFinished"/>.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.AfterTestFinished.AttributeName">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.AfterTestStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.IAfterTestStarting"/>.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.AfterTestStarting.AttributeName">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.DelegatingMessageSink">
            <summary>
            Implementation of <see cref="T:Xunit.Abstractions.IMessageSink"/> that delegates to another implementation of
            <see cref="T:Xunit.Abstractions.IMessageSink"/> while calling into a callback for each message.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.DelegatingMessageSink.#ctor(Xunit.Abstractions.IMessageSink,System.Action{Xunit.Abstractions.IMessageSinkMessage})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.DelegatingMessageSink"/> class.
            </summary>
            <param name="innerSink">The inner message sink.</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:Xunit.Sdk.DelegatingMessageSink.OnMessage(Xunit.Abstractions.IMessageSinkMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.DelegatingMessageSink`1">
            <summary>
            Implementation of <see cref="T:Xunit.Abstractions.IMessageSink"/> that delegates to another implementation of
            <see cref="T:Xunit.Abstractions.IMessageSink"/> while calling into a callback for each message. In addition,
            it issues a <see cref="P:Xunit.Sdk.DelegatingMessageSink`1.Finished"/> event when a message of the type <typeparamref name="TFinalMessage"/>
            is seen.
            </summary>
            <typeparam name="TFinalMessage">The type of the T final message.</typeparam>
        </member>
        <member name="M:Xunit.Sdk.DelegatingMessageSink`1.#ctor(Xunit.Abstractions.IMessageSink,System.Action{Xunit.Abstractions.IMessageSinkMessage})">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.DelegatingMessageSink"/> class.
            </summary>
            <param name="innerSink">The inner message sink.</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:Xunit.Sdk.DelegatingMessageSink`1.OnMessage(Xunit.Abstractions.IMessageSinkMessage)">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.DelegatingMessageSink`1.FinalMessage">
            <summary>
            The final message that was seen that caused <see cref="P:Xunit.Sdk.DelegatingMessageSink`1.Finished"/> to be triggered.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.DelegatingMessageSink`1.Finished">
            <summary>
            An event that is triggered when a message of type <typeparamref name="TFinalMessage" /> is seen.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.TestClassConstructionFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestClassConstructionFinished"/>.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.TestClassConstructionStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestClassConstructionStarting"/>.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.TestClassDisposeFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestClassDisposeFinished"/>.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.TestClassDisposeStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestClassDisposeStarting"/>.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.TestFailed">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestFailed"/>.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.TestResultMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestResultMessage"/>.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestResultMessage.ExecutionTime">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestResultMessage.Output">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestFailed.ExceptionType">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestFailed.Message">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestFailed.StackTrace">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestMethodFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestMethodFinished"/>.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestMethodFinished.ClassName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestMethodFinished.MethodName">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestMethodStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestMethodStarting"/>.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestMethodStarting.ClassName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestMethodStarting.MethodName">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestSkipped">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestSkipped"/>.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestSkipped.Reason">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.DiscoveryCompleteMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.IDiscoveryCompleteMessage"/>.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.DiscoveryCompleteMessage.Warnings">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.ErrorMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.IErrorMessage"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ErrorMessage.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.ErrorMessage"/> class.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ErrorMessage.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.ErrorMessage"/> class.
            </summary>
            <param name="ex">The exception that represents the error message.</param>
        </member>
        <member name="P:Xunit.Sdk.ErrorMessage.ExceptionType">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ErrorMessage.Message">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ErrorMessage.StackTrace">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestCaseFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestCaseFinished"/>.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestCaseFinished.ExecutionTime">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestCaseFinished.TestsFailed">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestCaseFinished.TestsRun">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestCaseFinished.TestsSkipped">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestCaseStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestCaseStarting"/>.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.TestClassFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestClassFinished"/>.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestClassFinished.ExecutionTime">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestClassFinished.TestsFailed">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestClassFinished.TestsRun">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestClassFinished.TestsSkipped">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestClassStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestClassStarting"/>.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.TestCollectionFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestCollectionFinished"/>.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestCollectionFinished.ExecutionTime">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestCollectionFinished.TestsFailed">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestCollectionFinished.TestsRun">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestCollectionFinished.TestsSkipped">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestCollectionStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestCollectionStarting"/>.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.TestFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestFinished"/>.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestFinished.ExecutionTime">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestFinished.Output">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestPassed">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestPassed"/>.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.TestStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestStarting"/>.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.TestAssemblyFinished">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestAssemblyFinished"/>.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestAssemblyFinished.Assembly">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestAssemblyFinished.ExecutionTime">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestAssemblyFinished.TestsFailed">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestAssemblyFinished.TestsRun">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestAssemblyFinished.TestsSkipped">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestAssemblyStarting">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestAssemblyStarting"/>.
            </summary>
        </member>
        <member name="P:Xunit.Sdk.TestAssemblyStarting.AssemblyFileName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestAssemblyStarting.ConfigFileName">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestAssemblyStarting.StartTime">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestAssemblyStarting.TestEnvironment">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.TestAssemblyStarting.TestFrameworkDisplayName">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.TestCaseDiscoveryMessage">
            <summary>
            Default implementation of <see cref="T:Xunit.Abstractions.ITestCaseDiscoveryMessage"/>.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.ReflectionTypeInfo">
            <summary>
            Reflection-based implementation of <see cref="T:Xunit.Abstractions.IReflectionTypeInfo"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ReflectionTypeInfo.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.ReflectionTypeInfo"/> class.
            </summary>
            <param name="type">The type to wrap.</param>
        </member>
        <member name="M:Xunit.Sdk.ReflectionTypeInfo.GetCustomAttributes(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.ReflectionTypeInfo.GetMethods(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.ReflectionTypeInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionTypeInfo.Assembly">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionTypeInfo.BaseType">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionTypeInfo.Interfaces">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionTypeInfo.IsAbstract">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionTypeInfo.IsSealed">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionTypeInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionTypeInfo.Type">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.ReflectionParameterInfo">
            <summary>
            Reflection-based implementation of <see cref="T:Xunit.Abstractions.IReflectionParameterInfo"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ReflectionParameterInfo.#ctor(System.Reflection.ParameterInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.ReflectionParameterInfo"/> class.
            </summary>
            <param name="parameterInfo">The parameter to be wrapped.</param>
        </member>
        <member name="P:Xunit.Sdk.ReflectionParameterInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionParameterInfo.ParameterInfo">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.ReflectionMethodInfo">
            <summary>
            Reflection-based implementation of <see cref="T:Xunit.Abstractions.IReflectionMethodInfo"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ReflectionMethodInfo.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.ReflectionMethodInfo"/> class.
            </summary>
            <param name="method">The method to be wrapped.</param>
        </member>
        <member name="M:Xunit.Sdk.ReflectionMethodInfo.GetCustomAttributes(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.ReflectionMethodInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.ReflectionMethodInfo.GetParameters">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionMethodInfo.IsAbstract">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionMethodInfo.IsPublic">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionMethodInfo.IsStatic">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionMethodInfo.MethodInfo">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionMethodInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionMethodInfo.ReturnType">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionMethodInfo.Type">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.ReflectionAssemblyInfo">
            <summary>
            Reflection-based implementation of <see cref="T:Xunit.Abstractions.IReflectionAssemblyInfo"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ReflectionAssemblyInfo.#ctor(System.Reflection.Assembly)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.ReflectionAssemblyInfo"/> class.
            </summary>
            <param name="assembly">The assembly to be wrapped.</param>
        </member>
        <member name="M:Xunit.Sdk.ReflectionAssemblyInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.ReflectionAssemblyInfo"/> class.
            </summary>
            <param name="assemblyFileName">The assembly to be wrapped.</param>
        </member>
        <member name="M:Xunit.Sdk.ReflectionAssemblyInfo.GetCustomAttributes(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.ReflectionAssemblyInfo.GetType(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.ReflectionAssemblyInfo.GetTypes(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.ReflectionAssemblyInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionAssemblyInfo.Assembly">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionAssemblyInfo.AssemblyPath">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionAssemblyInfo.Name">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.ReflectionAttributeInfo">
            <summary>
            Reflection-based implementation of <see cref="T:Xunit.Abstractions.IReflectionAttributeInfo"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.ReflectionAttributeInfo.#ctor(System.Reflection.CustomAttributeData)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.ReflectionAttributeInfo"/> class.
            </summary>
            <param name="attribute">The attribute to be wrapped.</param>
        </member>
        <member name="M:Xunit.Sdk.ReflectionAttributeInfo.GetConstructorArguments">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.ReflectionAttributeInfo.GetCustomAttributes(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.ReflectionAttributeInfo.GetNamedArgument``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.ReflectionAttributeInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionAttributeInfo.Attribute">
            <inheritdoc/>
        </member>
        <member name="P:Xunit.Sdk.ReflectionAttributeInfo.AttributeData">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.Sdk.Reflector">
            <summary>
            Wrapper to implement types from xunit.abstractions.dll using reflection.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.Reflector.Wrap(System.Reflection.Assembly)">
            <summary>
            Converts an <see cref="T:System.Reflection.Assembly"/> into an <see cref="T:Xunit.Abstractions.IReflectionAssemblyInfo"/>.
            </summary>
            <param name="assembly">The assembly to wrap.</param>
            <returns>The wrapper</returns>
        </member>
        <member name="M:Xunit.Sdk.Reflector.Wrap(System.Reflection.CustomAttributeData)">
            <summary>
            Converts an <see cref="T:System.Attribute"/> into an <see cref="T:Xunit.Abstractions.IAttributeInfo"/> using reflection.
            </summary>
            <param name="attribute">The attribute to wrap.</param>
            <returns>The wrapper</returns>
        </member>
        <member name="M:Xunit.Sdk.Reflector.Wrap(System.Reflection.MethodInfo)">
            <summary>
            Converts a <see cref="T:System.Reflection.MethodInfo"/> into an <see cref="T:Xunit.Abstractions.IMethodInfo"/> using reflection.
            </summary>
            <param name="method">The method to wrap</param>
            <returns>The wrapper</returns>
        </member>
        <member name="M:Xunit.Sdk.Reflector.Wrap(System.Reflection.ParameterInfo)">
            <summary>
            Converts a <see cref="T:System.Reflection.ParameterInfo"/> into an <see cref="T:Xunit.Abstractions.IParameterInfo"/> using reflection.
            </summary>
            <param name="parameter">THe parameter to wrap</param>
            <returns>The wrapper</returns>
        </member>
        <member name="M:Xunit.Sdk.Reflector.Wrap(System.Type)">
            <summary>
            Converts a <see cref="T:System.Type"/> into an <see cref="T:Xunit.Abstractions.ITypeInfo"/> using reflection.
            </summary>
            <param name="type">The type to wrap</param>
            <returns>The wrapper</returns>
        </member>
        <member name="T:Xunit.Sdk.SerializationHelper">
            <summary>
            Serializes and de-serializes <see cref="T:Xunit.Abstractions.ITestCase"/> instances using <see cref="F:Xunit.Sdk.SerializationHelper.BinaryFormatter"/>,
            <see cref="M:System.Convert.ToBase64String(System.Byte[])"/>, and <see cref="M:System.Convert.FromBase64String(System.String)"/>.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.SerializationHelper.Deserialize``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Xunit.Sdk.SerializationHelper.Serialize(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.CollectionBehaviorAttribute">
            <summary>
            Used to declare a the default test collection behavior for the assembly.
            </summary>
        </member>
        <member name="M:Xunit.CollectionBehaviorAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.CollectionBehaviorAttribute"/> class.
            </summary>
        </member>
        <member name="M:Xunit.CollectionBehaviorAttribute.#ctor(Xunit.CollectionBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.CollectionBehaviorAttribute"/> class.
            </summary>
            <param name="collectionBehavior">The collection behavior for the assembly.</param>
        </member>
        <member name="M:Xunit.CollectionBehaviorAttribute.#ctor(System.Int32)">
            <summary>
            This method is here as an allowance to Enum-issues related to CustomAttributeData.
            </summary>
        </member>
        <member name="M:Xunit.CollectionBehaviorAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.CollectionBehaviorAttribute"/> class.
            </summary>
            <param name="factoryTypeName">The type name of the test collection factory (that implements <see cref="T:Xunit.Sdk.IXunitTestCollectionFactory"/>).</param>
            <param name="factoryAssemblyName">The assembly that <paramref name="factoryTypeName"/> exists in.</param>
        </member>
        <member name="P:Xunit.CollectionBehaviorAttribute.DisableTestParallelization">
            <summary>
            Determines whether tests in this assembly are run in parallel.
            </summary>
        </member>
        <member name="T:Xunit.Sdk.TestClassException">
            <summary>
            Represents an exception that happened during the process of a test class. This typically
            means there were problems identifying the correct test class constructor, or problems
            creating the fixture data for the test class.
            </summary>
        </member>
        <member name="M:Xunit.Sdk.TestClassException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.Sdk.TestClassException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Xunit.Sdk.TestClassException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Xunit.TestCaseOrdererAttribute">
            <summary>
            Used to decorate an assembly, test collection, or test class to allow
            the use a custom <see cref="T:Xunit.Sdk.ITestCaseOrderer"/>.
            </summary>
        </member>
        <member name="M:Xunit.TestCaseOrdererAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xunit.TestCaseOrdererAttribute"/> class.
            </summary>
            <param name="ordererTypeName">The type name of the orderer class (that implements <see cref="T:Xunit.Sdk.ITestCaseOrderer"/>).</param>
            <param name="ordererAssemblyName">The assembly that <paramref name="ordererTypeName"/> exists in.</param>
        </member>
        <member name="T:Xunit.TheoryAttribute">
            <summary>
            Marks a test method as being a data theory. Data theories are tests which are fed
            various bits of data from a data source, mapping to parameters on the test method.
            If the data source contains multiple rows, then the test method is executed
            multiple times (once with each data row). Data is provided by attributes which
            derive from <see cref="T:Xunit.Sdk.DataAttribute"/> (notably, <see cref="T:Xunit.InlineDataAttribute"/> and
            <see cref="T:Xunit.PropertyDataAttribute"/>).
            </summary>
        </member>
        <member name="T:Xunit.TraitAttribute">
            <summary>
            Attribute used to decorate a test method with arbitrary name/value pairs ("traits").
            </summary>
        </member>
        <member name="M:Xunit.TraitAttribute.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Xunit.TraitAttribute"/> class.
            </summary>
            <param name="name">The trait name</param>
            <param name="value">The trait value</param>
        </member>
        <member name="P:Xunit.TraitAttribute.Name">
            <summary>
            Gets the trait name.
            </summary>
        </member>
        <member name="P:Xunit.TraitAttribute.Value">
            <summary>
            Gets the trait value.
            </summary>
        </member>
    </members>
</doc>
